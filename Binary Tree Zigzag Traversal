/*************************************************************

    Following is the Binary Tree node structure

    class BinaryTreeNode
    {
    public :
        T data;
        BinaryTreeNode<T> *left;
        BinaryTreeNode<T> *right;

        BinaryTreeNode(T data) {
            this -> data = data;
            left = NULL;
            right = NULL;
        }
    };

*************************************************************/

vector<int> zigZagTraversal(BinaryTreeNode<int> *root)
{
    // Write your code here!
    vector<int> ans;
    if(root == NULL){
        return ans;
    }
    queue<BinaryTreeNode<int> *> q;
    q.push(root);
    bool flag=true;
    while(!q.empty()){
        int n = q.size();
        vector<int> vec(n);
        for(int i=0;i<n;i++){
            BinaryTreeNode<int>* curr = q.front();
            q.pop();
            int id;
            if(flag) id = i;
            else id = n-i-1;
            vec[id] = curr->data;
            if(curr->left){
                q.push(curr->left);
            }
            if(curr->right){
                q.push(curr->right);
            }
        }
        flag = !flag;
        for(int i=0;i<vec.size();i++){
            ans.push_back(vec[i]);
        }
    }
    return ans;
}
