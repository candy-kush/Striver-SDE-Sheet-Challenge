/************************************************************

    Following is the TreeNode class structure

    template <typename T>
    class TreeNode {
       public:
        T data;
        TreeNode<T> *left;
        TreeNode<T> *right;

        TreeNode(T data) {
            this->data = data;
            left = NULL;
            right = NULL;
        }
    };

************************************************************/
#include<bits/stdc++.h>
TreeNode<int>* makeTree(vector<int> &inorder, vector<int>& preorder,int inLow,int inHigh,int preLow,int preHigh,map<int,int> &inorderMap){
    if(preLow < 0 || preLow > preHigh){
        return NULL;
    }
    int rootData = preorder[preLow];
    TreeNode<int>* root = new TreeNode<int>(rootData);

    int index = inorderMap[rootData];
    int numLeft = preLow + index - inLow;

    root->left = makeTree(inorder,preorder,inLow,index-1,preLow+1,numLeft,inorderMap);
    root->right = makeTree(inorder,preorder,index+1,inHigh,numLeft+1,preHigh,inorderMap);
    return root;
}

TreeNode<int> *buildBinaryTree(vector<int> &inorder, vector<int> &preorder)
{
	//    Write your code here
    int n = inorder.size();
    map<int,int> inorderMap;
    for(int i=0;i<n;i++){
        inorderMap[inorder[i]]=i;
    }
    return makeTree(inorder,preorder,0,n-1,0,n-1,inorderMap);
}
