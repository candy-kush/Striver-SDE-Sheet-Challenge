/************************************************************
    Following is the Binary Search Tree node structure
    
    template <typename T>
    class TreeNode {
        public :
        T data;
        TreeNode<T> *left;
        TreeNode<T> *right;

        TreeNode(T data) {
            this -> data = data;
            left = NULL;
            right = NULL;
        }

        ~TreeNode() {
            if(left)
                delete left;
            if(right)
                delete right;
        }
    };

************************************************************/
TreeNode<int>* findLCA(TreeNode<int>* root,TreeNode<int>* n1,TreeNode<int>* n2){
    if(root == NULL){
        return NULL;
    }
    if(root->data == n1->data || root->data == n2->data){
        return root;
    }
    TreeNode<int>* left = findLCA(root->left,n1,n2);
    TreeNode<int>* right = findLCA(root->right,n1,n2);

    if(left != NULL && right != NULL){
        return root;
    }
    if(left == NULL && right == NULL){
        return NULL;
    }
    if(left != NULL){
        return left;
    }
    return right;
}

TreeNode<int>* LCAinaBST(TreeNode<int>* root, TreeNode<int>* P, TreeNode<int>* Q)
{
	// Write your code here
    TreeNode<int>* node = findLCA(root,P,Q);
    return node;
}
