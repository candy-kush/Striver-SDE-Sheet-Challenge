/**********************************************************

    Following is the Binary Tree Node structure:

    template <typename T>
    class BinaryTreeNode {
        public: 
        T data;
        BinaryTreeNode<T> *left;
        BinaryTreeNode<T> *right;

        BinaryTreeNode(T data) {
            this->data = data;
            left = NULL;
            right = NULL;
        }

        ~BinaryTreeNode() {
            if (left)
                delete left;
            if (right)
                delete right;
        }
    };
***********************************************************/

void inorder(BinaryTreeNode<int>* root,vector<int> &vec){
    
    if(root==NULL){
        return;
    }
    inorder(root->left,vec);
    vec.push_back(root->data);
    inorder(root->right,vec);
}
vector<int> getInOrderTraversal(BinaryTreeNode<int> *root)
{
    // Write your code here.
    vector<int> vec;
    inorder(root,vec);
    return vec;
}

bool pairSumBst(BinaryTreeNode<int> *root, int k)
{
    // Write your code here
    vector<int> vec = getInOrderTraversal(root);
    int low=0, high=vec.size()-1;
    while(low<high){
        if(vec[low]+vec[high]==k){
            return true;
        }
        else if(vec[low]+vec[high] > k){
            high--;
        }
        else{
            low++;
        }
    }
    return false;
}
